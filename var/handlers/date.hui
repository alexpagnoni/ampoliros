<?php
/*
 *
 *                    Ampoliros Application Server
 *
 *                      http://www.ampoliros.com
 *
 *
 *
 *   Copyright (C) 2000-2004 Solarix
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */
// $Id: date.hui,v 1.25 2004-07-14 13:15:37 alex Exp $

$huielementclass = 'HuiDate';

if ( !defined( 'DATE_HUI' ) )
{
define( 'DATE_HUI', true );

import('com.solarix.ampoliros.hui.HuiWidgetElement');
import('com.solarix.ampoliros.hui.HuiEventRawData');
import('com.solarix.ampoliros.locale.Locale');
import('com.solarix.ampoliros.locale.LocaleCountry');

/*!
 @class HuiDate

 @abstract Date string form widget.
 */
class HuiDate extends HuiWidgetElement
{
    public $mWidgetType = 'date';
    /*! @public mHint string - Help string for this element. */
    public $mHint;
    /*! @public mValue array - Default date. */
    public $mValue;
    /*! @public mDisp string - Dispatcher for this element. */
    public $mDisp;
    /*! @public mReadOnly boolean - Set to 'true' if this is a read only string. */
    public $mReadOnly;
    /*! @public mSize integer - Width in characters of the widget. */
    public $mSize = 10;
    /*! @public mMaxLength integer - Max string length. */
    public $mMaxLength = 10;
    /*! @public mCountry string - Country name, default to current user country. */
    public $mCountry;
    public $mLocaleCountryHandler;
    /*! @public mCountry string - Language name, default to current user language. */
    public $mLanguage;
    public $mLocaleHandler;
    /*! @public mTabIndex integer - Position of the current element in the tabbing order. */
    public $mTabIndex = 0;
    public $mType = 'date';

    function HuiDate( $elemName, $elemArgs = '', $elemTheme = '', $dispEvents = '' )
    {
        global $gEnv;

        $this->HuiWidgetElement( $elemName, $elemArgs, $elemTheme, $dispEvents );
        if ( isset( $this->mArgs['hint'] ) ) $this->mHint = $this->mArgs['hint'];
        if ( isset( $this->mArgs['value'] ) ) $this->mValue = $this->mArgs['value'];
        if ( isset( $this->mArgs['disp'] ) ) $this->mDisp = $this->mArgs['disp'];
        if ( isset( $this->mArgs['tabindex'] ) ) $this->mTabIndex = $this->mArgs['tabindex'];

        if ( isset( $this->mArgs['country'] ) and strlen( $this->mArgs['country'] ) ) $this->mCountry = $this->mArgs['country'];
        else $this->mCountry = $gEnv['user']['locale']['country'];

        if ( isset( $this->mArgs['language'] ) and strlen( $this->mArgs['language'] ) ) $this->mLanguage = $this->mArgs['language'];
        else $this->mLanguage = $gEnv['user']['locale']['language'];

        $this->mLocaleCountryHandler = new LocaleCountry( $this->mCountry );
        $this->mLocaleHandler = new Locale( 'amp_misc_hui', $this->mLanguage );

        if ( isset( $this->mArgs['readonly'] ) ) $this->mReadOnly = $this->mArgs['readonly'];
        if ( isset( $this->mArgs['type'] ) )
        {
            switch( $this->mArgs['type'] )
            {
            case 'date':
                $this->mSize = 10;
                $this->mMaxLength = 10;
                $this->mType = $this->mArgs['type'];
                break;

            case 'time':
                $this->mSize = 8;
                $this->mMaxLength = 8;
                $this->mType = $this->mArgs['type'];
                break;

            case 'shorttime':
                $this->mSize = 5;
                $this->mMaxLength = 5;
                $this->mType = $this->mArgs['type'];
                break;
            }
        }
    }

    function _Build()
    {
        $result = false;
        $event_data = new HuiEventRawData( $this->mDisp, $this->mName );

        $calendar_dateformat = str_replace( '/', '\\/', $this->mLocaleCountryHandler->ShortDateFormat() );
        $calendar_dateformat = str_replace( 'd', 'DD', $calendar_dateformat );
        $calendar_dateformat = str_replace( 'm', 'MM', $calendar_dateformat );
        $calendar_dateformat = str_replace( 'y', 'YY', $calendar_dateformat );
        $calendar_dateformat = str_replace( 'Y', 'YYYY', $calendar_dateformat );

        $this->mLayout = '';

        if ( $this->mType == 'date' )
        {
            $this->mLayout .= "<script language=\"JavaScript\">

Calendar.Title = '".$this->mLocaleHandler->GetStr( 'calendar' )."';
Calendar.TableGridColor = '".$this->mThemeHandler->mColorsSet['tables']['gridcolor']."';
Calendar.TableBgColor = '".$this->mThemeHandler->mColorsSet['tables']['bgcolor']."';
Calendar.TableHeaderBgColor = '".$this->mThemeHandler->mColorsSet['tables']['headerbgcolor']."';

Calendar.WeekDays = new Array( '".$this->mLocaleHandler->GetStr( 'mon' )."',
    '".$this->mLocaleHandler->GetStr( 'tue' )."',
    '".$this->mLocaleHandler->GetStr( 'wed' )."',
    '".$this->mLocaleHandler->GetStr( 'thu' )."',
    '".$this->mLocaleHandler->GetStr( 'fri' )."',
    '".$this->mLocaleHandler->GetStr( 'sat' )."',
    '".$this->mLocaleHandler->GetStr( 'sun' )."');

Calendar.Months = new Array( '".$this->mLocaleHandler->GetStr( 'january' )."',
    '".$this->mLocaleHandler->GetStr( 'february' )."',
    '".$this->mLocaleHandler->GetStr( 'march' )."',
    '".$this->mLocaleHandler->GetStr( 'april' )."',
    '".$this->mLocaleHandler->GetStr( 'may' )."',
    '".$this->mLocaleHandler->GetStr( 'june' )."',
    '".$this->mLocaleHandler->GetStr( 'july' )."',
    '".$this->mLocaleHandler->GetStr( 'august' )."',
    '".$this->mLocaleHandler->GetStr( 'september' )."',
    '".$this->mLocaleHandler->GetStr( 'october' )."',
    '".$this->mLocaleHandler->GetStr( 'november' )."',
    '".$this->mLocaleHandler->GetStr( 'december' )."');
</script>";
        }

        $this->mLayout .= ( $this->mComments ? '<!-- begin '.$this->mName.' date -->' : '' ).
            '<span style="white-space: nowrap;"><input class="normal" '.( strlen( $this->mHint ) ? 'onMouseOver="huiHint(\''.$this->mHint.'\');" onMouseOut="huiUnHint();" ' : '' ).'type="text" name="'.$event_data->GetDataString().'"'.
            ' tabindex="'.$this->mTabIndex.'"'.
            ( is_array( $this->mValue ) ? ' value="'.htmlentities(
                $this->mType == 'date' ?
                $this->mLocaleCountryHandler->FormatShortArrayDate( $this->mValue ) :
                $this->mLocaleCountryHandler->FormatArrayTime( $this->mValue )
                ).'"' : '' ).
            ( $this->mHint ? ' alt="'.$this->mHint.'"' : '' ).
            ( strlen( $this->mSize ) ? ' size="'.$this->mSize.'"' : '' ).
            ( strlen( $this->mMaxLength ) ? ' maxlength="'.$this->mMaxLength.'"' : '' ).
            ( strlen( $this->mReadOnly ) ? ' readonly' : '' ).
            '>'.
            ( $this->mReadOnly != 'true' ?
                ( $this->mType == 'date' ? "&nbsp;<a href=\"javascript:show_calendar( 'forms[' + GetFormNumber('".$event_data->GetDataString()."') + '].elements[' +  GetElementNumber('".$event_data->GetDataString()."') + ']',".
                ( is_array( $this->mValue ) ? "'".sprintf( '%u', $this->mValue['mon'] - 1 )."','".$this->mValue['year']."'" : 'null,null' ).",'".$calendar_dateformat."');\">".
                '<img src="'.$this->mThemeHandler->mIconsBase.$this->mThemeHandler->mIconsSet['mini']['kuser']['base'].
                                '/mini/'.$this->mThemeHandler->mIconsSet['mini']['1day']['file'].'" alt="" border="0" style="width: 16px; height: 16px;"></a>' : '' )
            : '' ).
            '</span>'.
            ( $this->mComments ? '<!-- end '.$this->mName." string -->\n" : '' );
        $result = true;

        return $result;
    }
}

}
?>
