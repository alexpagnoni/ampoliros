<?php
/*
 *
 *                    Ampoliros Application Server
 *
 *                      http://www.ampoliros.com
 *
 *
 *
 *   Copyright (C) 2000-2004 Solarix
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 */
// $Id: configman.library,v 1.21 2004-07-08 15:04:23 alex Exp $

if (!defined('CONFIGMAN_LIBRARY')) {
    define ('CONFIGMAN_LIBRARY', TRUE);

    // Extensions
    //
    define ('UPDATINGEXT', '.update');
    define ('LOCKEXT', '.lock');

    // Way of writing the configuration file
    //
    define ('CONFIGMODE_ROOT', 1); // Used when writing to a configuration file
    // not writable by the web server user
    define ('CONFIGMODE_DIRECT', 2); // Used when writing directly to the
    // configuration file

    // Where to write the new segments
    //
    define ('CONFIG_POSITION_TOP', 1); // Top of the file
    define ('CONFIG_POSITION_BOTTOM', 2); // Bottom of the file

    /*!
     @class ConfigBase
    
     @abstract File manipulation utilty, it transparently handles root files.
     */
    class ConfigBase {
        /*! @var mConfigFile string - Location of configuration file. */
        private $mConfigFile;
        /*! @var mConfigMode integer - Configuration file handling, CONFIGMODE_ROOT if it is a root file, CONFIGMODE_DIRECT if it can be directly written. */
        private $mConfigMode;
        private $mCron;
        private $mAutoCommit;
        private $mModule;
        private $mEntry;

        /*!
         @function ConfigBase
        
         @abstract Class constructor.
         */
        function ConfigBase($configFile, $configMode = CONFIGMODE_ROOT, $autoCommit = FALSE, $module = '', $entry = '') {
                // Arguments check
        //
    if (strlen($configFile))
                $this -> mConfigFile = $configFile;
            else {
                import('com.solarix.ampoliros.io.log.Logger');
                $log = new Logger(AMP_LOG);
                $log -> LogDie('ampoliros.configman_library.configbase_class.configbase', 'No config file');
            }

            if (!defined('ROOTCRONTAB'))
                $configMode = CONFIGMODE_DIRECT;

            $this -> mConfigMode = $configMode;

            $this -> mAutoCommit = $autoCommit;

            if ($this -> mAutoCommit) {
                OpenLibrary('cron.library');

                $this -> mModule = $module;
                $this -> mEntry = $entry;
                $this -> mCron = new SimpleCron($module);
            }
        }

        /*!
         @function ReadConfig
        
         @abstract Reads the file.
        
         @result File content.
         */
        function ReadConfig() {
            $result = false;
            $src = $this -> GetSrcFile();
            $this -> LockFile();

            if (file_exists($src)) {
                $result = file_get_contents($src);
                //$this->unlockfile();
            } else {
                import('com.solarix.ampoliros.io.log.Logger');
                $log = new Logger(AMP_LOG);
                $log -> LogEvent('ampoliros.configman_library.configbase_class.readconfig', 'Unable to open configuration file', LOGGER_ERROR);
            }
            $this -> UnLockFile();

            return $result;
        }

        /*!
        @function WriteConfig
        
        @abstract Writes the file.
        */
        function WriteConfig($buffer) {
            $result = false;
            $this -> LockFile();

            if ($fh = @ fopen($this -> GetDestFile(), 'w')) {
                fwrite($fh, $buffer);
                fclose($fh);
            } else {
                import('com.solarix.ampoliros.io.log.Logger');
                $log = new Logger(AMP_LOG);
                $log -> LogEvent('ampoliros.configman_library.configbase_class.writeconfig', 'Unable to open destination configuration file '.$this -> getdestfile(), LOGGER_ERROR);
            }
            $this -> UpdateLock();
            $this -> UnLockFile();

            if ($this -> mAutoCommit and $this -> mConfigMode == CONFIGMODE_ROOT) {
                OpenLibrary('cron.library');
                
                import('carthag.core.Registry');
                $reg = Registry::instance();

                $user_upd = $reg->getEntry('amp.config')->getKey('PRIVATE_TREE').'var/bin/updater "'.md5($this -> mConfigFile).'.'.basename($this -> mConfigFile).'" "'.TMP_PATH.'" "'.$this -> mConfigFile.'"'."\n";
                $this -> mCron -> AddEntry($this -> mEntry, $user_upd, SIMPLECRONTYPE_TEMPORARY);
            }

            return $result;
        }

        /*!
        @function GetSrcFile
        
        @abstract Returns the current source file name.
        */
        function GetSrcFile() {
            switch ($this -> mConfigMode) {
                case CONFIGMODE_ROOT :
                    if (file_exists(TMP_PATH.md5($this -> mConfigFile).'.'.basename($this -> mConfigFile).UPDATINGEXT)) {
                        $source_file = TMP_PATH.md5($this -> mConfigFile).'.'.basename($this -> mConfigFile);
                    } else {
                        $source_file = $this -> mConfigFile;
                    }
                    break;

                case CONFIGMODE_DIRECT :
                    $source_file = $this -> mConfigFile;
                    break;
            }

            return $source_file;
        }

        /*!
        @function GetDestFile
        
        @abstract Returns the current destination file name.
        */
        function GetDestFile() {
            switch ($this -> mConfigMode) {
                case CONFIGMODE_ROOT :
                    $dest_file = TMP_PATH.md5($this -> mConfigFile).'.'.basename($this -> mConfigFile);
                    break;

                case CONFIGMODE_DIRECT :
                    $dest_file = $this -> mConfigFile;
                    break;
            }

            return $dest_file;
        }

        /*!
        @function LockFile
        
        @abstract Locks the file.
        */
        function LockFile() {
            while (file_exists(TMP_PATH.md5($this -> mConfigFile).'.'.basename($this -> mConfigFile).LOCKEXT)) {
                clearstatcache();
                sleep(1);
            }

            $result = @ touch(TMP_PATH.md5($this -> mConfigFile).'.'.basename($this -> mConfigFile).LOCKEXT, time());

            return $result;
        }

        /*!
        @function UnLockFile
        
        @abstract Unlocks the file.
        */
        function UnLockFile() {
            $result = file_exists(TMP_PATH.md5($this -> mConfigFile).'.'.basename($this -> mConfigFile).LOCKEXT) ? @ unlink(TMP_PATH.md5($this -> mConfigFile).'.'.basename($this -> mConfigFile).LOCKEXT) : TRUE;

            return $result;
        }

        /*!
        @function UpdateLock
        
        @abstract Creates the update lock file.
        */
        function UpdateLock() {
            if ($this -> mConfigMode == CONFIGMODE_ROOT)
                @ touch(TMP_PATH.md5($this -> mConfigFile).'.'.basename($this -> mConfigFile).UPDATINGEXT, time());
        }
    }

    // Configman tags
    //
    define ('CONFIGMAN_TAGDELIMITER', '###');
    define ('CONFIGMAN_BEGINTAG', '-BEGIN-'); // Begin segment tag
    define ('CONFIGMAN_ENDTAG', '-END-'); // End segment tag

    /*!
     @class ConfigMan
    
     @abstract Configuration files management.
    
     @discussion Configuration files are seen by this class as segments.
     */
    class ConfigMan extends ConfigBase {
        /*! @var mCommentPrefix string - Optional comment prefix, useful for non standard comments. */
        private $mCommentPrefix;

        // string $modid:      module id name, used to mark the segments
        // string $configfile: path of the configuration file
        //
        function ConfigMan($module, $configfile, $configmode = CONFIGMODE_ROOT, $autoCommit = FALSE, $entry = '') {
            $this -> ConfigBase($configfile, $configmode, $autoCommit, $module, $entry);
            // Arguments check
            //
            if (!empty($module))
                $this -> module = $module;
            else {
                import('com.solarix.ampoliros.io.log.Logger');
                $log = new Logger(AMP_LOG);
                $log -> logdie('ampoliros.configman_library.configman_class.configman', 'No module id name', LOGGER_FAULT);
            }
            $this -> mCommentPrefix = '';
        }

        // Public methods

        // Adds a new segment
        //
        function AddSegment($segid, $segment, $position = CONFIG_POSITION_BOTTOM) {
            $result = false;

            // Arguments check
            //
            if (!empty($segid) and !empty($segment)) {
                $src = $this -> getsrcfile();

                $this -> lockfile();

                // Reads the configuration file, if it exists
                //

                if (file_exists($src) and $sh = @ fopen($src, 'r')) {
                    $buffer = null;

                    while (!feof($sh)) {
                        $buffer.= fread($sh, 4096);
                    }

                    fclose($sh);
                }

                // Writes the configuration file
                //
                if ($fh = @ fopen($this -> getdestfile(), 'w')) {
                    // Executed if the segment must be positioned in the bottom of the file
                    //
                    if (!empty($buffer) and ($position == CONFIG_POSITION_BOTTOM))
                        @ fwrite($fh, $buffer);

                    // Writes segment block
                    //
                    @ fputs($fh, $this -> mCommentPrefix.CONFIGMAN_TAGDELIMITER.$this -> mModule.CONFIGMAN_BEGINTAG.$segid.CONFIGMAN_TAGDELIMITER."\n");
                    @ fputs($fh, $segment); // !! it should check for EOL
                    @ fputs($fh, $this -> mCommentPrefix.CONFIGMAN_TAGDELIMITER.$this -> mModule.CONFIGMAN_ENDTAG.$segid.CONFIGMAN_TAGDELIMITER."\n");

                    // Executed if the segment must be positioned in the top of the file
                    //
                    if (!empty($buffer) and ($position == CONFIG_POSITION_TOP))
                        @ fwrite($fh, $buffer);

                    @ fclose($fh);

                    $result = true;
                } else {
                    import('com.solarix.ampoliros.io.log.Logger');
                    $log = new Logger(AMP_LOG);
                    $log -> LogEvent('ampoliros.configman_library.configman_class.addsegment', 'Unable to open destination configuration file '.$this -> getdestfile(), LOGGER_ERROR);
                }
                $this -> UpdateLock();
                $this -> unlockfile();
            } else {
                import('com.solarix.ampoliros.io.log.Logger');
                $log = new Logger(AMP_LOG);
                $log -> LogEvent('ampoliros.configman_library.configman_class.addsegment', 'Missing segment id and/or segment', LOGGER_ERROR);
            }
            return $result;
        }

        // Removes a segment
        //
        function RemoveSegment($segid) {
            $result = false;

            if (!empty($segid)) {
                $src = $this -> getsrcfile();

                $this -> lockfile();

                if (file_exists($src) and $fh = @ fopen($src, 'r')) {
                    $result = true;

                    $buffer = null;

                    $state = 'ADD';

                    while (!feof($fh)) {
                        $currline = fgets($fh);
                        if (strcmp($currline, $this -> mCommentPrefix.CONFIGMAN_TAGDELIMITER.$this -> mModule.CONFIGMAN_BEGINTAG.$segid.CONFIGMAN_TAGDELIMITER."\n") == 0)
                            $state = 'PASS';
                        if (strcmp($state, 'ADD') == 0)
                            $buffer.= $currline;
                        if (strcmp($currline, $this -> mCommentPrefix.CONFIGMAN_TAGDELIMITER.$this -> mModule.CONFIGMAN_ENDTAG.$segid.CONFIGMAN_TAGDELIMITER."\n") == 0)
                            $state = 'ADD';
                    }
                    @ fclose($fh);

                    if ($fhd = @ fopen($this -> getdestfile(), 'w')) {
                        @ fwrite($fhd, $buffer);
                        @ fclose($fhd);
                    } else {
                        import('com.solarix.ampoliros.io.log.Logger');
                        $log = new Logger(AMP_LOG);
                        $log -> LogEvent('ampoliros.configman_library.configman_class.removesegment', 'Unable to open destination configuration file '.$this -> getdestfile(), LOGGER_ERROR);
                    }
                }

                $this -> unlockfile();
                $this -> UpdateLock();
            } else {
                import('com.solarix.ampoliros.io.log.Logger');
                $log = new Logger(AMP_LOG);
                $log -> LogEvent('ampoliros.configman_library.configman_class.removesegment', 'Missing segment id', LOGGER_ERROR);
            }
            return $result;
        }

        // Changes a segment
        //
        function ChangeSegment($segid, $segment, $position = CONFIG_POSITION_BOTTOM) {
            $result = false;

            if (!empty($segid) and !empty($segment)) {
                $this -> removesegment($segid);
                $result = $this -> addsegment($segid, $segment, $position);
            } else {
                import('com.solarix.ampoliros.io.log.Logger');
                $log = new Logger(AMP_LOG);
                $log -> LogEvent('ampoliros.configman_library.configman_class.changesegment', 'Missing segment id and/or segment', LOGGER_ERROR);
            }
            return $result;
        }
    }

    /*!
     @class ConfigFile
    
     @abstract Handling of configuration files in the "key = value" format.
    
     @discussion This is read only now.
     */
    class ConfigFile {
        /*! @var mConfigFile string - Full path of the configuration file. */
        private $mConfigFile;
        /*! @var mConfigValues array - Array of all the key value pairs. */
        public $mConfigValues;
        /*! @var mOpened boolean - True if the given file exists and has been opened. */
        public $mOpened = false;

        function ConfigFile($fileName, $create = false) {
                // Checks to see if the file is there
    if (!$create and !file_exists($fileName)) {
            } else {
                if (!file_exists($fileName))
                    $mode = 'w';
                else
                    $mode = 'r';

                $fp = @ fopen($fileName, $mode);
                if ($fp) {
                    $this -> mConfigFile = $fileName;
                    $this -> mOpened = true;

                    while ($fl = @ fgets($fp)) {
                        $trimmed_line = trim($fl);

                        if ((substr($trimmed_line, 0, 1) != '#') and (substr($trimmed_line, 0, 1) != ';') and (strpos($trimmed_line, '='))) {
                            $key = substr($trimmed_line, 0, (strpos($trimmed_line, '=')));
                            $value = substr($trimmed_line, (strpos($trimmed_line, '=') + 1));
                            $this -> mConfigValues[trim($key)] = trim($value);
                        }
                    }

                    @ fclose($fp);
                }
            }
        }

        /*!
         @function Value
        
         @abstract Returns the value of a key.
        
         @param keyName string - Key name.
        
         @result The value of the key, if it exists.
         */
        function Value($keyName) {
            if (isset($this -> mConfigValues[$keyName]))
                return trim($this -> mConfigValues[$keyName]);
            else
                return '';
        }

        /*!
         @function SetValue
        
         @abstract Sets a value for a key.
        
         @param keyName string - Key name.
         @param value string - Key value.
        
         @result True if the key has been written.
         */
        function SetValue($keyName, $value) {
            $result = false;

            $fm = new FileMan();
            $fm -> SetFile($this -> mConfigFile);

            if ($fm -> basefile) {
                $keys = $fm -> SearchInLine('^'.$keyName.' ');
                if (is_array($keys) and sizeof($keys)) {
                    // Key found
                    //
                    reset($keys);
                    $line = key($keys);

                    $line ++;
                    $result = $fm -> ReplaceLine($line, $keyName.' = '.$value);
                } else {
                    // :KLUDGE: wuh 010716: ugly
                    //This should be replaced by a better regexp

                    $keys = $fm -> SearchInLine('^'.$keyName.'=');
                    if (is_array($keys) and sizeof($keys)) {
                        // Key found
                        //
                        reset($keys);
                        $line = key($keys);
                        $line ++;
                        $result = $fm -> ReplaceLine($line, $keyName.' = '.$value);
                    } else {
                        // Key not found
                        //
                        $result = $fm -> WriteEnd($keyName.' = '.$value);
                    }
                }

                $this -> mConfigValues[$keyName] = $value;
            }

            return $result;
        }

        /*!
         @function ValuesArray
        
         @abstract Returns the array of the values.
        
         @result An array with all the key value pairs in the configuration file.
         */
        function ValuesArray() {
            return $this -> mConfigValues;
        }

        /*!
         @function Opened
        
         @abstract Returns true it the given file exists and has been opened.
         */
        function Opened() {
            return $this -> mOpened;
        }
    }

    /*
    * Text File Manipulation Class
    * Author: Boris Penck <boris@gamate.com>
    * Date: 2001-06-24
    */
    class FileMan {

        public $basefile = '';
        public $filearray = array();
        public $totallines = 0;

        /*
        * setFile(string filename)
        * set filename for further use
        */
        function setFile($file = '') {
            if ($file != '' && file_exists($file)) {
                $this -> basefile = $file;
                $this -> filearray = $this -> readFileToArray();
                foreach ($this -> filearray as $key => $value) {
                    $this -> totallines++;
                }
            }
        }

        // Do not call ! Internal function 
        function outputError($errorNo) {
            switch ($errorNo) {
                case 1 :
                    echo '<b>Error</b>: No file selected. Define your file with $class->setFile(file) !';
                    break;
                case 2 :
                    echo '<b>Error</b>: Selected File not found or bad file permissions !';
                    break;
                case 3 :
                    echo '<b>Error</b>: File not modified or given line not found';
                    break;

                default :
                    echo '<b>Error</b>: Unkown error in Class FileMan';
            }
        }

        // Do not call ! Internal function
        function readFileToArray() {
            if ($this -> basefile != '') {
                $tempArray = file($this -> basefile);
                return $tempArray;
            } else {
                $this -> outputError(1);
            }
        }

        /*
        * Callable functions
        *
        * below this, there all all callable function to manipulate a file
        *
        */

        /*
        * readEntire()
        * 	returns an array containing the complete file, each arrayelement
        * 	contains one line of the file
        */
        function readEntire() {
            if ($this -> basefile != '') {
                return $this -> filearray;
            } else {
                $this -> outputError(1);
            }
        }

        /*
        * readFirstX(int amount of lines)
        *	returns an array containing the first X Lines
        */
        function readFirstX($amountOfLines) {
            if ($this -> basefile != '') {
                $tempArray = array();
                for ($line = 0; $line <= ($amountOfLines -1); $line ++) {
                    $tempArray[] = $this -> filearray[$line];
                }
                return $tempArray;
            } else {
                $this -> outputError(1);
            }
        }

        /*
        * readLastX(int amount of lines)
        *	returns an array contaiing the last X lines
        */
        function readLastX($amountOfLines) {
            if ($this -> basefile != '') {
                $tempArray = array();
                $startLine = $this -> totallines - $amountOfLines;
                $i = 0;
                foreach ($this -> filearray as $key => $value) {
                    if ($i >= $startLine) {
                        $tempArray[] = $value;
                    }
                    $i ++;
                }
                return $tempArray;
            } else {
                $this -> outputError(1);
            }
        }

        /*
        * writeEnd(string string)
        *	appends a line to the file
        */
        function writeEnd($writeStr) {
            if ($this -> basefile != '') {
                $fp = fopen($this -> basefile, 'a');
                if ($fp) {
                    if (!ereg("\n$", $writeStr)) {
                        $writeStr.= "\n";
                    }
                    fputs($fp, $writeStr);
                    fclose($fp);
                    return true;
                } else {
                    $this -> outputError(2);
                }
            } else {
                $this -> outputError(1);
            }
        }

        /*
        * writebegin(string string)
        *       prepends a line to the file
        */
        function writeBegin($writeStr) {
            if ($this -> basefile != '') {
                $fp = @ fopen($this -> basefile, 'w');
                if ($fp) {
                    if (!ereg("\n$", $writeStr)) {
                        $writeStr.= "\n";
                    }
                    fputs($fp, $writeStr);
                    foreach ($this -> filearray as $lNo => $lineValue) {
                        fputs($fp, $lineValue);
                    }
                    fclose($fp);
                    return true;
                } else {
                    $this -> outputError(2);
                }
            } else {
                $this -> outputError(1);
            }
        }

        /*
        * delLineNo(int number of line)
        *       delete a line is the file, lines begin with 1 (not 0!)
        */
        function delLineNo($lineNo) {
            if ($this -> basefile != '') {
                $fp = @ fopen($this -> basefile, 'w');
                if ($fp) {
                    foreach ($this -> filearray as $lNo => $lineValue) {
                        if ($lNo != ($lineNo -1)) {
                            fputs($fp, $lineValue);
                        } else {
                            $modificated = 1;
                        }
                    }
                    fclose($fp);
                    if ($modificated == 1) {
                        return true;
                    } else {
                        $this -> outputError(3);
                    }
                } else {
                    $this -> outputError(2);
                }
            } else {
                $this -> outputError(1);
            }
        }

        /*
        * writeAfterLine(int line number, string string)
        *       insert a line after a given line number, lines begin with 1
        */
        function writeAfterLine($lineNo, $writeStr) {
            if ($this -> basefile != '') {
                $fp = @ fopen($this -> basefile, 'w');
                if ($fp) {
                    if (!ereg("\n$", $writeStr)) {
                        $writeStr.= "\n";
                    }
                    foreach ($this -> filearray as $lNo => $lineValue) {
                        if ($lNo == ($lineNo -1)) {
                            fputs($fp, $lineValue);
                            fputs($fp, $writeStr);
                            $modificated = 1;
                        } else {
                            fputs($fp, $lineValue);
                        }
                    }
                    fclose($fp);
                    if ($modificated == 1) {
                        return true;
                    } else {
                        $this -> outputError(3);
                    }
                } else {
                    $this -> outputError(2);
                }
            } else {
                $this -> outputError(1);
            }
        }

        /*
        * replaceLine(int number of line, string string)
        *       replaces a line with the given sting(line), lines begin with 1
        */
        function replaceLine($lineNo, $replaceStr) {
            if ($this -> basefile != '') {
                $fp = @ fopen($this -> basefile, 'w');
                if ($fp) {
                    if (!ereg("\n$", $replaceStr)) {
                        $replaceStr.= "\n";
                    }
                    foreach ($this -> filearray as $lNo => $lineValue) {
                        if ($lNo == ($lineNo -1)) {
                            fputs($fp, $replaceStr);
                            $modificated = 1;
                        } else {
                            fputs($fp, $lineValue);
                        }
                    }
                    fclose($fp);
                    if ($modificated == 1) {
                        return true;
                    } else {
                        $this -> outputError(3);
                    }
                } else {
                    $this -> outputError(2);
                }
            } else {
                $this -> outputError(1);
            }
        }

        /*
        * getLine(int number of line)
        *       returns a string containing line X of the file, lines begin with 0!
        */
        function getLine($lineNo) {
            if ($this -> basefile != '') {
                return $this -> filearray[$lineNo];
            } else {
                $this -> outputError(1);
            }
        }

        /*
        * getLastLine(int number of line)
        *       returns a string containing the last line of the file
        */
        function getLastLine() {
            if ($this -> basefile != '') {
                return $this -> filearray[$this -> totallines];
            } else {
                $this -> outputError(1);
            }
        }

        /*
        * getFirstLine(int number of line)
        *       returns a string containing the first line of the file
        */
        function getFirstLine() {
            if ($this -> basefile != '') {
                return $this -> filearray[0];
            } else {
                $this -> outputError(1);
            }
        }

        /*
        * getRandomLine()
        *       returns a string containing a random line of the file
        */
        function getRandomLine() {
            if ($this -> basefile != '') {
                $randInt = rand(0, $this -> totallines);
                return $this -> filearray[$randInt];
            } else {
                $this -> outputError(1);
            }
        }

        /*
        * searchInLine(string string)
        *       searches each line for a string or regular expression and
        *    	returns an array of $linenumber => $linecontent
        */
        function searchInLine($sStr = '') {
            $tempArray = array();
            foreach ($this -> filearray as $lineNo => $lineValue) {
                if (eregi($sStr, $lineValue)) {
                    $tempArray[$lineNo] = $lineValue;
                    $found = 1;
                }
            }
            if ($found == 1) {
                return $tempArray;
            } else {
                return false;
            }
        }
    }

}
?>
